/*
33.	Write a program to demonstrate functionalities of this keyword in java. 
*/

class This
{
	private int rno;
	private String name;
	This()
	{
		this(102,"XYZ");
	}
	This(int rno, String name)
	{
		this.rno=rno;
		this.name=name;
	}
	void setData(int rno, String name)
	{
		this.rno = rno;
		this.name = name;
	}
	void showData()
	{
		System.out.println(rno+" "+name);
	}
}
class ThisDemo
{
	public static void main(String args[])
	{
		This s = new This();
		s.setData(101,"Abc");
		s.showData();
		This s1 = new This();
		s1.showData();
	}
}




/*
34.	Create a class Circle that has two data members, one to store the radius and another to store area and three methods first init() method to input radius from user, second calculateArea() method to calculate area of circle and third display() method to display values of radius and area. Create class CircleDemo ( main class) that creates the Circle object and calls init(), calculateArea() and display() methods.
*/
import java.util.*;
class Circle
{
	private int radious;
	private double area;
	Scanner sc = new Scanner(System.in);
	void init()
	{
		System.out.println("Enter Radious ");
		radious = sc.nextInt();
	}
	double calculateArea()
	{
		area = 3.14 * radious * radious;
		return area;
	}
	void display()
	{
		System.out.println("Area of circle = "+calculateArea());
	}
}
class CircleMain
{
	public static void main(String args[])
	{
		Circle c = new Circle();
		c.init();
		c.display();
	}
}



/*
35.	Create a class MathOperation that has four static methods. add() method that takes two integer numbers as parameter and returns the sum of the numbers. subtract() method that takes two integer numbers as parameter and returns the difference of the numbers. multiply() method that takes two integer numbers as parameter and returns the product. power() method that takes two integer numbers as parameter and returns the power of first number to second number. Create another class Demo (main class) that takes the two numbers from the user and calls all four methods of MathOperation class by providing entered numbers and prints the return values of every method.
*/
import java.util.*;
class MathOpe
{
	
	static int sum(int i, int j)
	{
		System.out.print("Sum of numbers =");
		return i+j;
	}
	static int sub(int i,int j)
	{
		System.out.print("Subtract of numbers =");
		return i-j;
	}
	static int multi(int i, int j)
	{
		System.out.print("Multiply of numbers =");
		return i*j;
	}
	static double pow(int i, int j)
	{
		System.out.print("Power of numbers =");
		return Math.pow(i,j);
	}
	static void show(double res)
	{
		System.out.println(res);
		
	}
}

class MathOpeMain
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter numbers ");
		int a = sc.nextInt();
		int b = sc.nextInt();
		
		int s = MathOpe.sum(a,b);
		MathOpe.show(s);
		
		int s1 = MathOpe.sub(a,b);
		MathOpe.show(s1);
		
		int s2 = MathOpe.multi(a,b);
		MathOpe.show(s2);
		
		double s3 = MathOpe.pow(a,b);
		MathOpe.show(s3);
		
		
	}
}


/*
36.	Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
a.	 two integers 
b.	 three floats 
c.	 all elements of array 
d.	one double and one integer 
*/

 class MathOperation {

	double multiply(int a,int b)
	{
		
		int mul = a * b;
		return mul;
	}
	double multiply(float a,float b,float c)
	{
		double mul = a * b * c;
		return mul;
	}
	double multiply(int a,double b)
	{
		double mul = a * b;
		return mul;
	}
	double multiply(int []a)
	{
		int mul = 1;
		for(int i = 0 ; i < a.length ; i++)
		{
			mul*=a[i];
		}
		return mul;
	}
	
}
 class MultiOpeMain {

	public static void main(String aa[])
	{
		int[] a = {1,2,3};
		MathOperation c = new MathOperation();
		System.out.println(c.multiply(a));
		System.out.println(c.multiply(10,20.0));
		System.out.println(c.multiply(10,10));
		System.out.println(c.multiply(10.5F,10.4F,3.2F));
		
	}
}


/*
37.	Create a class Person with properties (name and age) with following features. 
a.	Default age of person should be 18.
b.	A person object can be initialized with name and age.
c.	Method to display name and age of person
Create another class PersonDemo ( main class ) that demonstrates the functionalities of Person class by creating Person object and calling methods.
*/

 class Person {
	private int age;
	private String name;
	Person()
	{
		this.age = 18;
	}
	Person(int age,String name)
	{
		this.age = age;
		this.name = name;
	}
	void display()
	{
		System.out.println("The age is "+age);
		System.out.println("The name of student is "+name);
	}
}

 class PersonMain {

	public static void main(String aa[])
	{
		Person p = new Person();
		p.display();
		Person p1 = new Person(23,"ABC");
		p1.display();
	}
}

/*
38.	Create a class Employee with three data members (empNo, salary and totalSalary) and following features.
a.	Only parameterized constructor. [Do not overload the constructor]
b.	totalSalary always represents salary total of all the employees created.
c.	empNo should be auto incremented.
d.	display total employees and totalSalary using a method.
Create another class EmployeeDemo (main class) that creates some Employee objects and calls Employee method to display no. of employees and total of their salaries.
*/

 class Employee {

	static int empid = 0;
	private int salary;
	static int totalSal;
	
	Employee(int sal)
	{
		empid+=1;
		this.salary  = sal;
		totalSal +=sal;
	}
	void display()
	{
		System.out.println("Total Employees are "+empid);
		System.out.println("The total salary is "+totalSal);
		
	}
}

 class EmpMain {

	public static void main(String arr[])
	{
		Employee q = new Employee(500);
		q.display();	
		Employee q1 = new Employee(1500);
		q1.display();	
		Employee q2 = new Employee(600);
		q2.display();
	}
}

/*
39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all three data members.  
Create a main method in different class (say ProductDemo) and perform following task:
a. Accept information for five Product objects from user and store objects in an array
b. Find pid of product with highest price. 
c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all products. ( amount spent on single product = price of product * quantity of product )
*/
import java.util.Scanner;
 class Product {

	public int pid;
	public int price;
	public int quantity;
	
	Product(int pid,int price,int quantity)
	{
		this.pid = pid;
		this.price = price;
		this.quantity = quantity;
	}
	
	void display()
	{
		System.out.println("PID is "+pid);
		System.out.println("Price is "+price);
		System.out.println("Quantity "+quantity);
	}
}
 class ProductMain {
	public static void main(String a[])
	{
		Scanner c = new Scanner(System.in);
		Product[] arr = new Product[2];
		int max = 0;
		for(int i = 0 ; i < arr.length;i++)
		{
			System.out.println("Enter id");
			int pid = c.nextInt();
			System.out.println("Enter Price");
			int price = c.nextInt();
			System.out.println("Enter Quantity");
			int qu = c.nextInt();
			Product p = new Product(pid,price,qu);
			arr[i] = p;
			
			
			if(i == 0)
			{
				continue;
			}
			if(arr[i].price > arr[i - 1].price)
				{
					max = arr[i].price;
				}
		}
		System.out.println("Max price is "+max);
		
	}
}


/*
41.	Write a program to demonstrate this() construct functionality.
*/

 class ThisD {

	private  int age;
	private String name;
	ThisD()
	{
		this(10,"ABC");
		System.out.println("In this construct");
	}
	ThisD(int age,String name)
	{
		this.age = age;
		this.name = name;
		System.out.println("In param");
	}
	void display()
	{
		System.out.println("Age is "+age);
		System.out.println("Name is "+name);
	}
}

 class ThisMain {

	public static void main(String arr[])
	{
		ThisD q1 = new ThisD();
		q1.display();
	}
}
